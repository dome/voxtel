<?php


function vwifi_perm() {
  return array('access wifi','hotspot');
}

/**
 * Implementation of hook_menu().
 */
function vwifi_menu() {
  $items = array();

/* TODO
   Non menu code that was placed in hook_menu under the '!$may_cache' block
   so that it could be run during initialization, should now be moved to hook_init.
   Previously we called hook_init twice, once early in the bootstrap process, second
   just after the bootstrap has finished. The first instance is now called boot
   instead of init.
   
   In Drupal 6, there are now two hooks that can be used by modules to execute code
   at the beginning of a page request. hook_boot() replaces hook_boot() in Drupal 5
   and runs on each page request, even for cached pages. hook_boot() now only runs
   for non-cached pages and thus can be used for code that was previously placed in
   hook_menu() with $may_cache = FALSE:
   
   Dynamic menu items under a '!$may_cache' block can often be simplified
   to remove references to arg(n) and use of '%<function-name>' to check
   conditions. See http://drupal.org/node/103114.
   
   The title and description arguments should not have strings wrapped in t(),
   because translation of these happen in a later stage in the menu system.
*/


    $items['wifi'] = array(
      'description' => 'WiFi Node.', 'title' => 'ThaiFi Hotspot',
      'page callback' => 'vwifi_overview',
      'weight' => -1,
      'access arguments' => array('hotspot'),
	'type' => MENU_NORMAL_ITEM,
    );	

    $items['wifi/list'] = array(
      'description' => 'WiFi Node.', 'title' => 'List',
      'page callback' => 'vwifi_overview',
      'weight' => -1,
      'access arguments' => array('hotspot'),
      'type' => MENU_DEFAULT_LOCAL_TASK
    );	

    $items['wifi/add'] = array(
      'title' => 'Add WiFi Node',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vwifi_node_form'),
      'access arguments' => array('hotspot'),
      'weight' => 0,
      'type' => MENU_LOCAL_TASK
      );

    $items['wifi/edit'] = array(
      'title' => 'Edit WiFi Node',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vwifi_node_form'),
      'access arguments' => array('hotspot'),
      'weight' => 0,
      'type' => MENU_CALLBACK
      );

    $items['wifi/node/view'] = array(
      'title' => 'ThaiFi Node',
      'page callback' => 'vwifi_node_view',
      'weight' => -1,
      'access arguments' => array('access wifi'),
      'type' => MENU_CALLBACK
      );

    $items['wifi/delete'] = array(
      'title' => 'Edit WiFi Node',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vwifi_node_delete_confirm'),
      'access arguments' => array('hotspot'),
      'weight' => 0,
      'type' => MENU_CALLBACK
      );

    $items['wifi/card/list'] = array(
      'description' => 'Card List.', 'title' => 'Card List',
      'page callback' => 'vwifi_card_overview',
      'weight' => 2,
      'access arguments' => array('hotspot'),
      'type' => MENU_LOCAL_TASK
    );	

    $items['wifi/card/report'] = array(
      'description' => 'Card List.', 'title' => 'Card List',
      'page callback' => 'vwifi_card_report',
      'weight' => 2,
      'access arguments' => array('hotspot'),
      'type' => MENU_CALLBACK
    );	

    $items['wifi/node/report'] = array(
      'description' => 'Node List.', 'title' => 'Report By Node',
      'page callback' => 'vwifi_node_report',
      'weight' => 2,
      'access arguments' => array('hotspot'),
      'type' => MENU_CALLBACK
    );	

    $items['wifi/node/nodereport'] = array(
      'description' => 'Node Report.', 'title' => 'Report By Node',
      'page callback' => 'vwifi_node_report',
      'weight' => 9,
      'access arguments' => array('hotspot'),
      'type' => MENU_LOCAL_TASK
    );	
    
    $items['wifi/card/add'] = array(
      'title' => 'Add Card',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vwifi_card_form'),
      'access arguments' => array('hotspot'),
      'weight' => 3,
      'type' => MENU_LOCAL_TASK
      );

    $items['wifi/card/edit'] = array(
      'title' => 'Edit Card',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vwifi_card_form'),
      'access arguments' => array('hotspot'),
      'weight' => 4,
      'type' => MENU_CALLBACK
      );

    $items['wifi/card/delete'] = array(
      'title' => 'Edit Card',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vwifi_card_delete_confirm'),
      'access arguments' => array('hotspot'),
      'weight' => 4,
      'type' => MENU_CALLBACK
      );


  return $items;
}


/**
 * Implementation of hook_user().
 */
function vwifi_user($op, &$edit, &$user) {

}

function vwifi_form_overview() {
/* 
 $filters['status'] = array('title' => t('status'),
      'options' => array('status-1'   => t('published'),     'status-0' => t('not published'),
                   'promote-1'  => t('promoted'),      'promote-0' => t('not promoted'),
		   'sticky-1'   => t('sticky'),        'sticky-0' => t('not sticky')));
 $filters['type'] = array('title' => t('type'), 'options' => node_get_types('names'));
*/

						      
  if (empty($_SESSION['vwifi_search_filter'])) {
    $_SESSION['vwifi_search_filter'] = '';
  }

  $form['search'] = array(
    '#type' => 'textfield',
    '#title' => 'Search',
    '#size' => 20,
    '#default_value' => $_SESSION['vwifi_search_filter']
  );
			
  $form['submit'] = array('#type' => 'submit', '#value' =>t('Filter'));
//  $form['#redirect'] = FALSE;

  return $form;
}
/**
 * Menu callback; displays a listing of log messages.
 */
function vwifi_card_overview() {
  global $user,$wifi_domain;
  $icons = array(WATCHDOG_NOTICE  => '',
                 WATCHDOG_WARNING => theme('image', 'misc/watchdog-warning.png', t('warning'), t('warning')),
                 WATCHDOG_ERROR   => theme('image', 'misc/watchdog-error.png', t('error'), t('error')));
  $classes = array(WATCHDOG_NOTICE => 'watchdog-notice', WATCHDOG_WARNING => 'watchdog-warning', WATCHDOG_ERROR => 'watchdog-error');

  //$output = drupal_get_form('vwifi_form_overview');
  $header = array(
    array('data' => t('Username'), 'field' => 'username','sort'=>'desc'),
    array('data' => t('Password'), 'field' => 'password'),
    array('data' => t('Value'), 'field' => 'value'),
    array('data' => t('Minute Remain'), 'field' => 'minute'),
    array('data' => t('Expire (day)'), 'field' => 'd_expire'),
    array('data' => t('Expire After Login'), 'field' => 'd_expire_use'),
    array('data' => t('Down Speed'), 'field' => 'down_speed'),
    array('data' => t('Up Speed'), 'field' => 'up_speed'),
    array('data' => t('Last Login'), 'field' => 'use'),
    array('data' => t('Operations'))
  );

  $tablesort = tablesort_sql($header);
  $search_str = $_SESSION['vwifi_search_filter'];
    $sql .= " SELECT * from ws_wifi_card Where Owner= '$user->name' ";
    $sql_count .= " SELECT count(id) from ws_wifi_card Where Owner= '$user->name' ";
  
//echo $sql;
    $result = pager_query($sql . $tablesort, 20,0,$sql_count);

  $xo = '[gmap ';
  while ($rate = db_fetch_object($result)) {
    $rows[] = 
      array(
        // Cells
        $rate->username.'@'.$wifi_domain,
        $rate->password,
        $rate->value,
        $rate->minute,
        $rate->d_expire,
        $rate->d_expire_use,
        $rate->down_speed,
        $rate->up_speed,
        $rate->use,
	l('Edit','wifi/card/edit/'.$rate->id)." ".l('Delete','wifi/card/delete/'.$rate->id)." ".l('Report','wifi/card/report/'.$rate->username),
    );
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('Data Not Found.'), 'colspan' => 20));
  }

  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 20, 0);
  return $output;
}

function vwifi_overview() {
  global $user;
  $icons = array(WATCHDOG_NOTICE  => '',
                 WATCHDOG_WARNING => theme('image', 'misc/watchdog-warning.png', t('warning'), t('warning')),
                 WATCHDOG_ERROR   => theme('image', 'misc/watchdog-error.png', t('error'), t('error')));
  $classes = array(WATCHDOG_NOTICE => 'watchdog-notice', WATCHDOG_WARNING => 'watchdog-warning', WATCHDOG_ERROR => 'watchdog-error');

  //$output = drupal_get_form('vwifi_form_overview');
  $header = array(
    array('data' => t('Node'), 'field' => 'name','sort'=>'desc'),
    array('data' => t('Address'), 'field' => 'addr1'),
    array('data' => t(''), 'field' => 'addr2'),
    array('data' => t('Operations'))
  );

  $tablesort = tablesort_sql($header);
  $search_str = $_SESSION['vwifi_search_filter'];
    $sql .= " SELECT * from ws_wifi Where Owner= '$user->name' ";
  
//echo $sql;
    $result = pager_query($sql . $tablesort, 20);

  $xo = '[gmap ';
  while ($rate = db_fetch_object($result)) {
    $rows[] =
      array(
        // Cells
        $rate->name,
        $rate->addr1,
        $rate->addr2,
	l('Edit','wifi/edit/'.$rate->id)." ".l('Delete','wifi/delete/'.$rate->id)
	." ".l('Report','wifi/node/report/'.$rate->name),
    );
   $xo .= 'markers=lblue::'.$rate->lat.','.$rate->lon.':'.$rate->name.'<br>'.$rate->addr1.'<br>'.$rate->addr2.'|';
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('Data Not Found.'), 'colspan' => 20));
  }

  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 20, 0);
  $xo .=' |align=Center |zoom=6 |center=13.880745842025602,101.00830078125 |width=780px |height=500px |id=macro_map |control=Small |type=Hybrid]';
  $output .=  theme('gmap', array('#settings' => gmap_parse_macro($xo)));
  //$mymap = gmap_parse_macro($xo);
  //print gmap_draw_map($mymap); 
  return $output;
}

/**
 * Menu callback; generic function to display a page of the most frequent
 * watchdog events of a specified type.
 */
function vwifi_top($type) {

}

function vwifi_form_overview_submit($form, &$form_state) {
  $_SESSION['vwifi_search_filter'] = $form_state['values']['search'];
}


function vwifi_node_form($id = NULL,$prefilled_values = array()) {
  global $user;
  if ($id) {
    $result = db_query("SELECT * FROM ws_wifi WHERE id = %d and owner='%s'",$id,$user->name);
    $rate = db_fetch_object($result);
    if (!$rate) {
      return drupal_goto('wifi');
    }

    $form['id'] = array(
      '#type' => 'value',
      '#value' => $rate->id,
    );
  $prefilled_values['longitude']=$rate->lon;
  $prefilled_values['latitude']=$rate->lat;
  }else{
    $prefilled_values['longitude']="100.50430297851562";
    $prefilled_values['latitude']="13.77006497946205";
  }
  $usegmap = (function_exists('gmap_set_location') && variable_get('location_usegmap', 1));
  if ($usegmap) {
    $form['map'] = array();  //reserve spot at top of form for map
  }
  $form['lat'] = array(
      '#prefix' => '<div class="container-inline">',
      '#type' => 'textfield',
      '#title' => t('Latitude'),
      '#default_value' => isset($prefilled_values['latitude']) ? $prefilled_values['latitude'] : '',
      '#size' => 32,
      '#maxlength' => 64
      );
  $form['lon'] = array(
      '#type' => 'textfield',
      '#title' => t('Longitude'),
      '#default_value' => isset($prefilled_values['longitude']) ? $prefilled_values['longitude'] : '',
      '#size' => 32,
      '#maxlength' => 64,
      '#description' => $description,
      '#suffix' => '</div>'
      );
        
  $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Node Name'),
      '#default_value' => $rate->name,
      '#size' => 64,
      '#maxlength' => 100,
      '#description' => $description,
      );

  $form['addr1'] = array(
      '#type' => 'textfield',
      '#title' => t('Address'),
      '#default_value' => $rate->addr1,
      '#size' => 64,
      '#maxlength' => 100,
      '#description' => $description,
      );
  $form['addr2'] = array(
      '#type' => 'textfield',
      '#title' => t('Address 1'),
      '#default_value' => $rate->addr2,
      '#size' => 64,
      '#maxlength' => 100,
      '#description' => $description,
      );
        
  if ($usegmap) {
    $map_macro = variable_get('gmap_user_map', '[gmap|id=usermap|center=0,30|zoom=8|width=100%|height=400px]');
    $form['map']['gmap']['#value'] = gmap_set_location($map_macro, $form, array('latitude'=>'lat','longitude'=>'lon'));
  }


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );


  return $form;
}

/**
 * Add/Edit bookmark form submit
 */
function vwifi_node_form_submit($form, &$form_state) {
  global $user;
  if ($form['id']) {
    $id = $form['id'];
    db_query("UPDATE ws_wifi SET accountid=%d, name = '%s',addr1='%s',addr2='%s',lon='%s',lat='%s'  WHERE id = %d and owner='%s' ", 
     $user->uid,$form['name'],$form['addr1'],$form['addr2'],$form['lon'],$form['lat'], $form['id'],$user->name);
    drupal_set_message("Provider Group '$form[description]' has been saved.");
  }
  else {
    db_query("INSERT into ws_wifi(accountid,lat,lon,name,addr1,addr2,owner) Values('%s','%s','%s','%s','%s','%s','%s')", $user->uid,$form['lat'],$form['lon'],$form['name']
    ,$form['addr1'],$form['addr2'],$user->name);
    drupal_set_message("Node  '$form[name]' has been Created.");
  }
  drupal_goto('wifi');
}

function vwifi_node_delete_confirm($id = NULL) {
  global $user;
  $rate = db_fetch_object(db_query("SELECT * from ws_wifi WHERE id = %d and owner='%s'", $id,$user->name));

  if (!$rate) {
    drupal_goto('wifi');
  }
  $form['id'] = array('#type' => 'value', '#value' => $rate->id);
  return confirm_form($form,
    t('Are you sure you want to delete %description?', array('%description' => $rate->name)), 
    $_GET['name'] ? $_GET['name'] : 'wifi', 
    t('This action cannot be undone.'),
    t('Delete'), t('Cancel')  
  );
}

function vwifi_node_delete_confirm_submit($form, &$form_state) {
  global $user;
  if ($form['confirm']) {
    db_query("DELETE FROM ws_wifi WHERE id = %d and owner='%s'", $form['id'],$user->name);
    drupal_goto('wifi');
  }
}

function vwifi_card_form($id = NULL) {
  global $user;
  if ($id) {
    $result = db_query("SELECT * FROM ws_wifi_card WHERE id = %d and owner='%s'",$id,$user->name);
    $rate = db_fetch_object($result);
    if (!$rate) {
      return drupal_goto('wifi');
    }

    $form['id'] = array(
      '#type' => 'value',
      '#value' => $rate->id,
    );
  $form['username'] = array(
      '#type' => 'textfield',
      '#title' => t('Username'),
      '#default_value' => $rate->username,
      '#size' => 32,
      '#required' => true,
      '#maxlength' => 64
      );
  $form['password'] = array(
      '#type' => 'textfield',
      '#title' => t('Password'),
      '#default_value' => $rate->password,
      '#required' => true,
      '#size' => 32,
      '#maxlength' => 64,
      '#description' => $description,
      );

  }else {

     $qty[1] = "1";
     $qty[10] = "10";
     $qty[20] = "20";
     $qty[50] = "50";
     $qty[100] = "100";
    $form['qty'] = array(
        '#type' => 'select',
	'#title' => t('QTY'),
	'#options' => $qty,
    );
  };
          
  $form['value'] = array(
      '#type' => 'textfield',
      '#title' => t('Card Value'),
      '#default_value' => $rate->value,
      '#size' => 16,
      '#required' => true,
      '#maxlength' => 100,
      );

  $form['minute'] = array(
      '#type' => 'textfield',
      '#title' => t('Minute'),
      '#default_value' => $rate->minute,
      '#size' => 16,
      '#required' => true,
      '#maxlength' => 100,
      );

  $form['d_expire'] = array(
      '#type' => 'textfield',
      '#title' => t('Expire (day)'),
      '#default_value' => $rate->d_expire,
      '#size' => 16,
      '#required' => true,
      '#maxlength' => 100,
      );
  $form['d_expire_use'] = array(
      '#type' => 'textfield',
      '#title' => t('Expire After First Login'),
      '#default_value' => $rate->d_expire_use,
      '#size' => 16,
      '#required' => true,
      '#maxlength' => 100,
      '#description' => $description,
      );
  $form['down_speed'] = array(
      '#type' => 'textfield',
      '#title' => t('Down Speed (Kbps)'),
      '#default_value' => $rate->down_speed,
      '#size' => 16,
      '#required' => true,
      '#maxlength' => 100,
      );
  $form['up_speed'] = array(
      '#type' => 'textfield',
      '#title' => t('Up Speed (Kbps)'),
      '#default_value' => $rate->up_speed,
      '#size' => 16,
      '#required' => true,
      '#maxlength' => 100,
      );
        
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );


  return $form;
}

/**
 * Add/Edit bookmark form submit
 */
function vwifi_card_form_submit($form, &$form_state) {
  global $user;
  if ($form['id']) {
    $id = $form['id'];
    //echo $id;
/*
    $sqlstr = "UPDATE ws_wifi_card SET username = $form['username'],password=$form['password'],
    value=$form['value'],d_expire=$form['d_expire'],d_expire_use=$form['d_expire_use'], 
    minute=$form['minute'],down_speed=$form['d_expire'],up_speed='%'   WHERE id = %d and owner='%s' "
*/
    db_query("UPDATE ws_wifi_card SET username = '%s',password='%s',value='%s',d_expire='%s',d_expire_use='%s', 
    minute='%s',down_speed='%s',up_speed='%s'   WHERE id = %d and owner='%s' ", 
     $form['username'],$form['password'],$form['value'],$form['d_expire'],$form['d_expire_use'],
     $form['minute'],$form['down_speed'],$form['up_speed'], $id,$user->name);
    drupal_set_message("Card has been saved.");
  }
  else {
    $xqty=$form['qty'];
    //die;
    for ($i = 1; $i <= $xqty; $i++) {
      $xpass=rand(223411, 998881);
      db_query("INSERT into ws_wifi_card(password,value,d_expire,d_expire_use,minute,down_speed,up_speed,owner) 
      Values('%s','%s','%s','%s','%s','%s','%s','%s')",$xpass,$form['value'],$form['d_expire'],$form['d_expire_use'],
       $form['minute'],$form['down_speed'],$form['up_speed'],$user->name);
    };
    drupal_set_message("Card  '$form[username]' has been Created.");
  }
  drupal_goto('wifi/card/list');
}

function vwifi_card_delete_confirm($id = NULL) {
  global $user;
  $rate = db_fetch_object(db_query("SELECT * from ws_wifi_card WHERE id = %d and owner='%s'", $id,$user->name));

  if (!$rate) {
    drupal_goto('wifi/card/list');
  }
  $form['id'] = array('#type' => 'value', '#value' => $rate->id);
  return confirm_form($form,
    t('Are you sure you want to delete %description?', array('%description' => $rate->username)), 
    $_GET['username'] ? $_GET['username'] : 'wifi', 
    t('This action cannot be undone.'),
    t('Delete'), t('Cancel')  
  );
}

function vwifi_card_delete_confirm_submit($form, &$form_state) {
  global $user;
  if ($form['confirm']) {
    db_query("DELETE FROM ws_wifi_card WHERE id = %d and owner='%s'", $form['id'],$user->name);
    drupal_goto('wifi/card/list');
  }
}

function vwifi_node_report($nodename=NULL) {
  global $user;
  $header = array(
    array('data' => t('Node'), 'field' => 'calledstationid','sort'=>'desc'),
    array('data' => t('Username'), 'field' => 'username'),
    array('data' => t('Start'), 'field' => 'acctstarttime'),
    array('data' => t('Stop'), 'field' => 'acctstoptime'),
    array('data' => t('Duration'), 'field' => 'acctsessiontime'),
  );

  $tablesort = tablesort_sql($header);
  if ($nodename) {
    $sql .= " SELECT * from ws_wifi_radacct Where calledstationid='$nodename' and Owner= '$user->name' ";
    $sql_count .= " SELECT count(radacctid) from ws_wifi_radacct Where calledstationid='$nodename' and Owner= '$user->name' ";
  }else{
    $sql .= " SELECT * from ws_wifi_radacct Where Owner= '$user->name' ";
    $sql_count .= " SELECT count(radacctid) from ws_wifi_radacct Where Owner= '$user->name' ";
  }
//echo $sql;
    $result = pager_query($sql . $tablesort, 20,0,$sql_count);

  $xo = '[gmap ';
  while ($rate = db_fetch_object($result)) {
    $rows[] =
      array(
        // Cells
        $rate->calledstationid,
        $rate->username,
        $rate->acctstarttime,
        $rate->acctstoptime,
        format_interval($rate->acctsessiontime),
    );
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('Data Not Found.'), 'colspan' => 20));
  }

  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 20, 0);
  return $output;
}

function vwifi_card_report($cardname) {
  global $user;
  //$output = drupal_get_form('vwifi_form_overview');
  $header = array(
    array('data' => t('Username'), 'field' => 'username'),
    array('data' => t('Start'), 'field' => 'acctstarttime','sort'=>'desc'),
    array('data' => t('Stop'), 'field' => 'acctstoptime'),
    array('data' => t('Duration'), 'field' => 'acctsessiontime'),
    array('data' => t('Node'), 'field' => 'nodeid'),
  );

  $tablesort = tablesort_sql($header);
  $search_str = $_SESSION['vwifi_search_filter'];
    $sql .= " SELECT * from ws_wifi_radacct Where username='$cardname' and Owner= '$user->name' ";
    $sql_count .= " SELECT count(radacctid) from ws_wifi_radacct Where username='$cardname' and Owner= '$user->name' ";
  
//echo $sql;
    $result = pager_query($sql . $tablesort, 20,0,$sql_count);

  $xo = '[gmap ';
  while ($rate = db_fetch_object($result)) {
    $rows[] =
      array(
        // Cells
        $rate->username,
        $rate->acctstarttime,
        $rate->acctstoptime,
        format_interval($rate->acctsessiontime),
        $rate->nodeid,
    );
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('Data Not Found.'), 'colspan' => 20));
  }

  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 20, 0);
  return $output;
}

function vwifi_node_view($node=NULL) {
  global $user;
  if ($node)
    $sql .= " SELECT * from ws_wifi Where  name='$node'";
  else
    $sql .= " SELECT * from ws_wifi ";
  
    $result = $result = db_query($sql);
    $totalnode = db_num_rows($result);
  $xo = '[gmap ';
  while ($rate = db_fetch_object($result)) {
     $xo .= 'markers=lblue::'.$rate->lat.','.$rate->lon.':'.$rate->name.'<br>'.$rate->addr1.'<br>'.$rate->addr2.'|';
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('Data Not Found.'), 'colspan' => 20));
  }

//  $output .= theme('table', $header, $rows);
//  $output .= theme('pager', NULL, 20, 0);
  $xo .=' |align=Center |zoom=6 |center=13.880745842025602,101.00830078125 |width=780px |height=500px |id=macro_map |control=Small |type=Hybrid]';
  if (! $node)
	drupal_set_message("Total $totalnode  Node");
  $output .=  theme('gmap', array('#settings' => gmap_parse_macro($xo)));
  //gmap_draw_map(gmap_parse_macro($xo));
  return $output;
  //print_r(gmap_parse_macro($xo));
  //print $output;
  //return gmap_parse_macro($xo);
}

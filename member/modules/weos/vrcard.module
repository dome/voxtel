<?php
function vrcard_menu() {
  $items = array();


    $items['reseller/card'] = array(
      'description' => 'View card.', 'title' => 'Card',
      'page callback' => 'vrcard_overview',
      'weight' => -1,
      'access arguments' => array('access reseller'),
	'type' => MENU_NORMAL_ITEM,
    );	

    $items['reseller/card/list'] = array(
      'description' => 'View card.', 'title' => 'List',
      'page callback' => 'vrcard_overview',
      'weight' => -1,
      'access arguments' => array('access reseller'),
      'type' => MENU_DEFAULT_LOCAL_TASK
    );	
    $items['reseller/card/edit'] = array(
      'title' => 'Edit Card',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vrcard_form'),
      'access arguments' => array('access reseller'),
      'type' => MENU_CALLBACK);
    $items['reseller/card/delete'] = array(
      'title' => 'Delete bookmarks',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vrcard_lot_delete_confirm'),
      'access arguments' => array('access reseller'),
      'type' => MENU_CALLBACK);
    $items['reseller/card/add'] = array(
      'title' => 'Add',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vrcard_form'),
      'access arguments' => array('access reseller'),
      'type' => MENU_LOCAL_TASK);
    $items['reseller/card/lot'] = array(
      'title' => 'Card Lot',
      'page callback' => 'vrcard_lot',
      'access arguments' => array('access reseller'),
      'type' => MENU_LOCAL_TASK);

  return $items;
}

function vrcard_lot() {
  global $user;
  $output = drupal_get_form('vrcard_lot_form_overview');
  $header = array(
    array('data' => t('Brand'), 'field' => 'brand'),
    array('data' => t('Exp (days)'), 'field' => 'days_expire'),
    array('data' => t('Exp (days) use'), 'field' => 'day_use_expire'),
    array('data' => t('Create Date'), 'field' => 'create_date'),
    array('data' => t('QTY'), 'field' => 'qty'),
    array('data' => t('Value'), 'field' => 'price'),
    array('data' => t('Currency'), 'field' => 'currency'),
    array('data' => t('Rate Group'), 'field' => 'rate'),
    array('data' => t('Operations'))
  );

  $tablesort = tablesort_sql($header);
  $search_str = $_SESSION['vrcard_lot_search_filter'];
  $sql = "SELECT *,fdate1(card_lot.create_date) As cdate,voiptariffgrp.description As create_date from card_lot LEFT JOIN voiptariffgrp ON card_lot.rate = voiptariffgrp.id";
  if ($search_str != '') {
    $_where .= " WHERE owner='$user->name' AND brand LIKE '$search_str%' ";
  }else
    $_where .= " WHERE owner='$user->name'";
  $sql = $sql.$_where;
  $sql_count = "select count(id) from  card_lot".$_where;
  
//echo $sql;
//    $result = pager_query($sql . $tablesort, 20);
    $result = pager_query($sql . $tablesort, 50,0,$sql_count);

  while ($rate = db_fetch_object($result)) {
    $rows[] = 
      array(
        // Cells
        $rate->brand,
        $rate->days_expire,
        $rate->days_use_expire,
        $rate->cdate,
        $rate->qty,
        $rate->price,
        $rate->currency,
        $rate->description,
    );
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('Data Not Found.'), 'colspan' => 20));
  }

  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 20, 0);

  return $output;
}

/**
 * Implementation of hook_cron().
 *
 * Remove expired log messages and flood control events.
 */
function vrcard_cron() {
//  db_query('DELETE FROM {watchdog} WHERE timestamp < %d', time() - variable_get('watchdog_clear', 604800));
//  db_query('DELETE FROM {flood} WHERE timestamp < %d', time() - 3600);
}

/**
 * Implementation of hook_user().
 */
function vrcard_user($op, &$edit, &$user) {

}

function vrcard_lot_form_overview() {
  if (empty($_SESSION['vrcard_search_filter'])) {
    $_SESSION['vrcard_search_filter'] = '';
  }

  $form['search'] = array(
    '#type' => 'textfield',
    '#title' => 'Search',
    '#size' => 20,
    '#default_value' => $_SESSION['vrcard_search_filter']
  );
			
  $form['submit'] = array('#type' => 'submit', '#value' =>t('Filter'));
//  $form['#redirect'] = FALSE;

  return $form;
}

function vrcard_form_overview() {
 global $user;
						      
  $types = array();

  $names[0] = "All";
  $result = db_query("SELECT brand,id,fdate1(create_date) As cdate FROM card_lot where owner='%s'  ORDER BY fdate1(create_date) ",$user->name);
  while ($object = db_fetch_object($result)) {
    $names[$object->id] = $object->brand."  ".$object->cdate;
  }
  if (empty($_SESSION['vrcard_brand_filter'])) {
    $_SESSION['vrcard_brand_filter'] = 0;
  }
  if (empty($_SESSION['vrcard_search_filter'])) {
    $_SESSION['vrcard_search_filter'] = '';
  }

  $form['filter'] = array(
    '#type' => 'select',
    '#title' => t('Filter by Card'),
    '#options' => $names,
    '#default_value' => $_SESSION['vcard_brand_filter']
  );


  $form['search'] = array(
    '#type' => 'textfield',
    '#title' => 'Search',
    '#size' => 20,
    '#default_value' => $_SESSION['vrcard_search_filter']
  );
			
  $form['submit'] = array('#type' => 'submit', '#value' =>t('Filter'));
//  $form['#redirect'] = FALSE;

  return $form;
}
/**
 * Menu callback; displays a listing of log messages.
 */
function vrcard_overview() {
  global $user;
  $icons = array(WATCHDOG_NOTICE  => '',
                 WATCHDOG_WARNING => theme('image', 'misc/watchdog-warning.png', t('warning'), t('warning')),
                 WATCHDOG_ERROR   => theme('image', 'misc/watchdog-error.png', t('error'), t('error')));
  $classes = array(WATCHDOG_NOTICE => 'watchdog-notice', WATCHDOG_WARNING => 'watchdog-warning', WATCHDOG_ERROR => 'watchdog-error');

  $output = drupal_get_form('vrcard_form_overview');
//username 	secret 	balance 	currencysym 	grpid 	accountid 	description 	create_date
  $header = array(
    array('data' => t('Number'), 'field' => 'number'),
    array('data' => t('Username'), 'field' => 'username'),
    array('data' => t('Password'), 'field' => 'password'),
    array('data' => t('Balance'), 'field' => 'balance'),
    array('data' => t('Currency'), 'field' => 'currencysym'),
    array('data' => t('Create'), 'field' => 'create_date'),
    array('data' => t('Exp Date'), 'field' => 'exp_date'),
    array('data' => t('Brand'), 'field' => 'brand'),
    array('data' => t('Group'), 'field' => 'description'),
    array('data' => l('Export','weos/excel'))
  );

  $tablesort = tablesort_sql($header);
  $search_str = $_SESSION['vrcard_search_filter'];
  $filter = $_SESSION['vrcard_brand_filter'];
  $sql = "SELECT vcard_no_exp.days_expire, vcard_no_exp.days_use_expire, fdate1(vcard_no_exp.create_date) As create_date , 
  vcard_no_exp.brand, vcard_no_exp.card_lot, vcard_no_exp.card_uid, vcard_no_exp.id, 
  vcard_no_exp.callerid, vcard_no_exp.member_uid, vcard_no_exp.username, 
  vcard_no_exp.secret As password, vcard_no_exp.number, vcard_no_exp.balance, vcard_no_exp.currencysym, 
  vcard_no_exp.grpid, vcard_no_exp.accountid, vcard_no_exp.description, vcard_no_exp.i_days_expire, 
  vcard_no_exp.i_days_use_expire, vcard_no_exp.first_use, vcard_no_exp.card_expire, vcard_no_exp.card_disable, 
          CASE
	            WHEN vcard_no_exp.first_use IS NOT NULL  THEN 
		         fdate1(vcard_no_exp.i_days_use_expire)
		    ELSE 
		         fdate1(vcard_no_exp.i_days_expire)
				          END AS exp_date
	 FROM vcard_no_exp ";
  $sql_export = "SELECT vcard_no_exp.brand As Brand,vcard_no_exp.number As Card_Number,
  vcard_no_exp.username As Login_name, vcard_no_exp.secret As password, vcard_no_exp.balance As Value, vcard_no_exp.currencysym As Currency, 
  fdate1(vcard_no_exp.create_date) As create_date , 
          CASE
	            WHEN vcard_no_exp.first_use IS NOT NULL  THEN 
		         fdate1(vcard_no_exp.i_days_use_expire)
		    ELSE 
		         fdate1(vcard_no_exp.i_days_expire)
				          END AS exp_date
	 FROM vcard_no_exp ";
  if ($filter > 0) {
    $sql .= " Where card_lot = $filter AND owner='$user->name' ";
    $sql_export .= " Where card_lot = $filter AND owner='$user->name' ";
    
  }else {
    $sql .= " Where 0=0 AND owner='$user->name' ";
    $sql_export .= " Where 0=0 AND owner='$user->name' ";
   };    

  if ($search_str != '') {
    $sql .= " AND number LIKE '$search_str%' ";
  }else {
    $sql .= " ";
  };
//echo $sql;
  $_SESSION['sqlstr'] = $sql_export;
  $_SESSION['filename'] = "card.xls";

    $result = pager_query($sql . $tablesort, 20);

  while ($rate = db_fetch_object($result)) {
    $rows[] =
      array(
        // Cells
        $rate->number,
        $rate->username,
        $rate->password,
        $rate->balance,
        $rate->currencysym,
        $rate->create_date,
        $rate->exp_date,
        $rate->brand,
        $rate->description,
	'',
    );
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('Data Not Found.'), 'colspan' => 20));
  }

  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 20, 0);

  return $output;
}


function vrcard_form_overview_submit($form, &$form_state) {
  $_SESSION['vrcard_search_filter'] = $form_state['values']['search'];
  $_SESSION['vrcard_brand_filter'] = $form_state['values']['filter'];
}

function vrcard_lot_form_overview_submit($form, &$form_state) {
  $_SESSION['vrcard_lot_search_filter'] = $form_state['values']['search'];
}

function vrcard_form($id = NULL) {
  global $user,$balance;
  $result = db_query("SELECT balance,currencysym from voipaccount where id=%d ",$user->vuid);
  $udetail = db_fetch_object($result);
  if (!$udetail) {
      drupal_set_message("Balance Not found. Please contact Admin ",'error');
      //return $output;
      //return drupal_goto('reseller');
  }else{
      $form['balance'] = array(
       '#type' => 'value',
       '#value' => $udetail->balance,
      );
      drupal_set_message("Your Balance :  ".$udetail->balance." ".$udetail->currencysym,'info');
  }

  if ($id) {
    $result = db_query("SELECT * FROM card_lot WHERE id = %d", $id);
    $card_lot = db_fetch_object($result);
    if (!$card_lot) {
      return drupal_goto('reseller/card');
    }

    $form['id'] = array(
      '#type' => 'value',
      '#value' => $card_lot->id,
    );
  }else{
  // new
    $t=getdate();
    $today=date('Y-m-d',$t[0]);
    $card_lot->brand = $user->name."-".$today;
    $card_lot->days_expire=720;
    $card_lot->days_use_expire=90;
  }

  $form['brand'] = array(
    '#type' => 'textfield',
    '#title' => t("Brand"),
    '#default_value' => $card_lot->brand,
    '#description' => t("The brand of this card lot."),
    '#maxlength' => 255,
    '#required' => true,
  );

  $form['days_expire'] = array(
    '#type' => 'textfield',
    '#title' => t("Expire (days)"),
    '#default_value' => $card_lot->days_expire,
    '#required' => true,
  );

  $form['days_use_expire'] = array(
    '#type' => 'textfield',
    '#title' => t("Expire (days) After first use"),
    '#default_value' => $card_lot->days_use_expire,
    '#required' => true,
  );

  $form['qty'] = array(
    '#type' => 'textfield',
    '#title' => t("QTY"),
    '#default_value' => $card_lot->qty,
    '#required' => true,
  );

  $form['price'] = array(
    '#type' => 'textfield',
    '#title' => t("Value"),
    '#default_value' => $card_lot->price,
    '#required' => true,
  );

  if (strlen($card_lot->currency)==0){
   $card_lot->currency="THB";
  };
  
  $form['currency'] = array(
    '#type' => 'textfield',
    '#title' => t("Currency"),
    '#default_value' => $card_lot->currency,
    '#required' => true,
  );

  $types = array();
  $result = db_query('SELECT  DISTINCT(description),grpid As id FROM user_rate_group Where accountid=%d',$user->vuid);
  while ($object = db_fetch_object($result)) {
    $names[$object->id] = $object->description;
  }
  //print $object->id;
  $form['rategr'] = array(
    '#type' => 'select',
    '#title' => t("rate"),
    '#options' => $names,
    '#default_value' => $object->id,
    '#required' => true,
  );

/*  
  $form['rategr'] = array(
    '#type' => 'textfield',
    '#title' => t("rate"),
    '#default_value' => $card_lot->rate,
    '#required' => true,
  );
*/
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );


  return $form;
}

/**
 * Add/Edit bookmark form submit
 */
function vrcard_form_submit($form, &$form_state) {
  global $user;
  if ($form['id']) {
    $id = $form['id'];
    db_query("UPDATE card_lot SET brand = '%s', days_expire = %d, days_use_expire = %d, qty = %d, price = %d
    , currency = '%s',rate = %d WHERE id = %d", $form['brand'], $form['days_expire'], $form['days_use_expire'], $form['qty']
    , $form['price'], $form['currency'],$form['rategr'], $form['id']);
    drupal_set_message("Card  '$form[brand]' has been saved.");
  }
  else {
   //create_card_cur
   /*
   co ALIAS FOR $1;
   value ALIAS FOR $2;
   days ALIAS FOR $3;
   days_use ALIAS FOR $4;
   muid ALIAS FOR $5;
   rategr ALIAS FOR $6;
   nbrand ALIAS FOR $7;
   ncur ALIAS FOR $8;
   integer, numeric, integer, integer, integer, integer, text, text
*/
   $total=$form['qty']*$form['price'];
   if ($total <= $form['balance']){
    // hold money
    db_query("INSERT into voippayment(accountid,ref,paid_out) Values(%d,'%s',%d)", $user->vuid,"Create Card ".$form['brand'],$total);
    // create card
    $card_lot = db_fetch_object(db_query("SELECT create_card_cur(%d,%d,%d,%d,1,%d,'%s','%s') As id",
    $form['qty'], $form['price'], $form['days_expire'],$form['days_use_expire'],$form['rategr'],$form['brand'], $form['currency']));
    drupal_set_message("Card  '$form[brand]' has been Created.");
    // update card_lot owner
    db_query("UPDATE card_lot set owner='%s' where id=%d",$user->name,$card_lot->id);
    db_query("UPDATE voipusers set owner='%s' where card_lot=%d",$user->name,$card_lot->id);
    
   }else{
    drupal_set_message("Not Enough Credit.",'error');
   };
  }
  drupal_goto('reseller/card/add');
}

